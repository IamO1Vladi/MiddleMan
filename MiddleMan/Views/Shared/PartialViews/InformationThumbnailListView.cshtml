@model List<InformationThumbnailViewModel>
@*
    
*@

@{
    int totalRecords = ViewBag.NumberOfRecords;
    int currentPage = ViewBag.CurrentPage;
}


<div class="row items filter-items">
                
    @{
        foreach (InformationThumbnailViewModel thumbnailViewModel in Model)
        {
            <div class="col-12 col-md-6 col-lg-4 item filter-item">
                <div class="row card p-0 text-center">
                    <div class="image-over">
                        <img src=@thumbnailViewModel.ThumbnailImageLink alt="thumbnail">
                    </div>
                    <div class="card-caption col-12 p-0">
                        <div class="card-body">
                            <a asp-controller="Information" asp-action="SinglePost">
                                <h4>@thumbnailViewModel.Topic</h4>
                                <p>@thumbnailViewModel.Summary</p>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }
    }

    <div class="col-1 filter-sizer"></div>
</div>

<!-- Pagination -->
<div class="row">
    <div class="col-12">
        <div class="pagination-wrapper justify-content-center">
            <ul class="pagination justify-content-center">
                <li class="page-item prev-page">
                    <a class="page-link" href="#" tabindex="-1">
                        <i class="icon-arrow-left"></i>
                    </a>
                </li>
               
                @{
                    for (int i = 1; i <= Math.Ceiling((double) totalRecords / 9); i++)
                    {
                        <li class="page-item page-number"><a class="page-link" href="#">@i</a></li>
                    }
                    // <li class="page-item page-number"><a class="page-link" asp-controller="Information" asp-action="InformationThumbnailListViewPartial">3</a></li>
                    // <li class="page-item page-number"><a class="page-link" asp-controller="Information" asp-action="InformationThumbnailListViewPartial">4</a></li>
                    // <li class="page-item page-number"><a class="page-link" asp-controller="Information" asp-action="InformationThumbnailListViewPartial">5</a></li>
                    // <li class="page-item page-number"><a class="page-link" asp-controller="Information" asp-action="InformationThumbnailListViewPartial">6</a></li>
                    // <li class="page-item page-number"><a class="page-link" asp-controller="Information" asp-action="InformationThumbnailListViewPartial">7</a></li>
                    // <li class="page-item page-number"><a class="page-link" asp-controller="Information" asp-action="InformationThumbnailListViewPartial">8</a></li>
                    // <li class="page-item page-number"><a class="page-link" asp-controller="Information" asp-action="InformationThumbnailListViewPartial">9</a></li>
                    // <li class="page-item page-number"><a class="page-link" asp-controller="Information" asp-action="InformationThumbnailListViewPartial">10</a></li>
                }
        
                <li class="page-item next-page">
                    <a class="page-link" href="#">
                        <i class="icon-arrow-right"></i>
                    </a>
                </li>
            </ul>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        let currentPage = @currentPage; // Start with the current page from the server
        const totalPages = $('.page-item.page-number').length; // Get total number of pages
        const maxVisiblePages = 3; // Only 3 pages are visible at a time
        let firstVisiblePage = Math.max(currentPage - Math.floor(maxVisiblePages / 2), 1); // Keep track of the first visible page

        // Function to show a set of pages without changing the active page
        function updateVisiblePages() {
            $('.page-item.page-number').removeClass('visible active'); // Remove both visible and active class

            let endPage = Math.min(firstVisiblePage + maxVisiblePages - 1, totalPages);

            // Adjust firstVisiblePage if at the end of pagination
            if (endPage - firstVisiblePage + 1 < maxVisiblePages) {
                firstVisiblePage = Math.max(endPage - maxVisiblePages + 1, 1);
            }

            // Show only the pages within the visible range
            for (let i = firstVisiblePage; i <= endPage; i++) {
                $('.page-item.page-number').eq(i - 1).addClass('visible'); // i - 1 since .eq() is 0-based
            }

            // Add the 'active' class to the current page (this remains fixed)
            $('.page-item.page-number').eq(currentPage - 1).addClass('active');
        }

        // Initial page setup
        updateVisiblePages();

        // Event listener for the "Next" arrow (shift visible pages to the right)
        $('.next-page').click(function (e) {
            e.preventDefault();
            if (firstVisiblePage + maxVisiblePages <= totalPages) {
                firstVisiblePage++;
                updateVisiblePages();
            }
        });

        // Event listener for the "Previous" arrow (shift visible pages to the left)
        $('.prev-page').click(function (e) {
            e.preventDefault();
            if (firstVisiblePage > 1) {
                firstVisiblePage--;
                updateVisiblePages();
            }
        });

        // Event listener for clicking directly on a page number (change current page)
        $('.page-item.page-number a').click(function (e) {
            e.preventDefault();
            currentPage = parseInt($(this).text()); // Update currentPage to the clicked page
            updateVisiblePages();
        });
    });


</script>


<script>

    $(document).ready(function () {
        // Use event delegation to attach the click event to dynamically loaded page numbers

        $(document).off('click', '.page-item.page-number a');

        $(document).on('click', '.page-item.page-number a', function (e) {
            e.preventDefault();

            let page = parseInt($(this).text()); // Get the page number from the clicked link
            
            // Show the loader before making the AJAX request
            $('#informationPostsListViewPlaceholder').html('<div class="informationLoader"></div>');

            window.scrollTo(0, $('#blog').offset().top);

            // Call the action via AJAX
            $.ajax({
                url: '@Url.Action("InformationThumbnailListViewPartial", "Information")', // Adjust this URL to your controller and action
                type: 'GET',
                data: {
                    page: page // Pass the current page number
                },
                success: function (response) {
                    // Replace the content of the partial view with the new content
                    $('#informationPostsListViewPlaceholder').html(response);
                },
                error: function () {
                    alert('Error loading page');
                }
            });
        });
    });


</script>
